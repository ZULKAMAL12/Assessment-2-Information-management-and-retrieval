
CREATE DATABASE TSC_Hotel_Booking; -- Create New Database phpmyadmin

-- Customer Table
CREATE TABLE Customer (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    PhoneNumber VARCHAR(15),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP 
);

-- Room Table
CREATE TABLE Room (
    RoomID INT AUTO_INCREMENT PRIMARY KEY,
    RoomType VARCHAR(50) NOT NULL,
    PricePerNight DECIMAL(10, 2) NOT NULL,
    Capacity INT NOT NULL,
    AvailabilityStatus BOOLEAN NOT NULL DEFAULT TRUE 
);

-- Booking Table
CREATE TABLE Booking (
    BookingID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT NOT NULL,
    CheckInDate DATE NOT NULL,
    CheckOutDate DATE NOT NULL,
    BookingStatus VARCHAR(50) NOT NULL DEFAULT 'Pending',
    NumberOfGuest INT NOT NULL,
    TotalPrice DECIMAL(10, 2),
    BookingDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID) ON DELETE CASCADE
);

-- BookingRoom Table
CREATE TABLE BookingRoom (
    BookingRoomID INT AUTO_INCREMENT PRIMARY KEY,
    BookingID INT NOT NULL,
    RoomID INT NOT NULL,
    Quantity INT NOT NULL DEFAULT 1,
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID) ON DELETE CASCADE,
    FOREIGN KEY (RoomID) REFERENCES Room(RoomID) ON DELETE CASCADE
);

 -- Payment Table
CREATE TABLE Payment (
    PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    BookingID INT NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    PaymentMethod VARCHAR(50),
    PaymentStatus VARCHAR(50) DEFAULT 'Pending',
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID) ON DELETE CASCADE
);


INSERT INTO Room (RoomType, PricePerNight, Capacity, AvailabilityStatus)
VALUES
('Family Room', 150.00, 3, 1), -- 3 Family Room
('Suite', 200.00, 2, 1),        --  2 Suite
('Standard Deluxe', 100.00, 3, 1); -- 3 Standard Deluxe


-- Register Procedure
DELIMITER $$

CREATE PROCEDURE InsertCustomer(
    IN p_Name VARCHAR(255),
    IN p_Email VARCHAR(255),
    IN p_Password VARCHAR(255),
    IN p_PhoneNumber VARCHAR(15)
)
BEGIN
    INSERT INTO Customer (Name, Email, Password, PhoneNumber)
    VALUES (p_Name, p_Email, p_Password, p_PhoneNumber);
END $$

DELIMITER ;





-- Trigger 1 Restore room Availability
DELIMITER //

CREATE TRIGGER RestoreRoomAvailability
AFTER DELETE ON Booking
FOR EACH ROW
BEGIN
    -- Step 1: Delete associated rows in BookingRoom
    DELETE FROM BookingRoom
    WHERE BookingID = OLD.BookingID;

    -- Step 2: Update Room availability dynamically
    UPDATE Room
    SET AvailabilityStatus = CASE
        -- If total bookings for a room are equal or exceed capacity, mark it become unavailable
        WHEN (
            SELECT COALESCE(SUM(br.Quantity), 0)
            FROM BookingRoom br
            WHERE br.RoomID = Room.RoomID
        ) >= Room.Capacity THEN 0
        -- Otherwise, say it available
        ELSE 1
    END
    WHERE RoomID IN (
        -- Only update affected RoomIDs
        SELECT DISTINCT br.RoomID
        FROM BookingRoom br
        WHERE br.RoomID IN (
            SELECT RoomID
            FROM BookingRoom
            WHERE BookingID = OLD.BookingID
        )
    );
END;
//

DELIMITER ;

--Trigger 2
DELIMITER //

CREATE TRIGGER UpdateRoomAvailabilityAfterInsert
AFTER INSERT ON BookingRoom
FOR EACH ROW
BEGIN
    -- Update room availability based on total bookings
    UPDATE Room
    SET AvailabilityStatus = CASE
        WHEN (
            SELECT COALESCE(SUM(br.Quantity), 0)
            FROM BookingRoom br
            WHERE br.RoomID = Room.RoomID
        ) >= Room.Capacity THEN 0
        ELSE 1
    END
    WHERE RoomID = NEW.RoomID;
END;
//

DELIMITER ;

--Trigger 3
DELIMITER //

CREATE TRIGGER UpdateRoomAvailabilityAfterUpdate
AFTER UPDATE ON BookingRoom
FOR EACH ROW
BEGIN
    -- Update room availability based on total bookings
    UPDATE Room
    SET AvailabilityStatus = CASE
        WHEN (
            SELECT COALESCE(SUM(br.Quantity), 0)
            FROM BookingRoom br
            WHERE br.RoomID = Room.RoomID
        ) >= Room.Capacity THEN 0
        ELSE 1
    END
    WHERE RoomID IN (NEW.RoomID, OLD.RoomID);
END;
//

DELIMITER ;

--Trigger 4 Trigger for Tracking Payment Status

DELIMITER //

CREATE TRIGGER UpdateBookingStatusOnPayment
AFTER INSERT ON Payment
FOR EACH ROW
BEGIN
    UPDATE Booking
    SET BookingStatus = 'Confirmed'
    WHERE BookingID = NEW.BookingID AND NEW.PaymentStatus = 'Paid';
END;
//

DELIMITER ;
